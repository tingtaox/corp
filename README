Tyche

https://www.typescriptlang.org/docs/handbook/react-&-webpack.html

1. Lay out the project
Let’s start out with a new directory. We’ll name it proj for now, but you can change it to whatever you want.

mkdir proj
cd proj
To start, we’re going to structure our project in the following way:

proj/
├─ dist/
└─ src/
   └─ components/

2. Initialize the project
npm init

3. Install webpack
npm install webpack --save

4. Install react, react-dom and the typings for them
npm install --save react react-dom @types/react @types/react-dom

5. Install typescript loader and source mapping
mpn install --save-dev typescript awesome-typescript-loader source-map-loader

6. Add typescript config file (tsconfig.json)
{
    "compilerOptions": {
        "outDir": "./dist/",
        "sourceMap": true,
        "noImplicitAny": true,
        "module": "commonjs",
        "target": "es5",
        "jsx": "react"
    },
    "include": [
        "./src/**/*"
    ]
}

7. Write some code
Add Hello.tsx under src/components
Add index.tsx under src
Add index.html under project directory

8. Create webpack config file (webpack.config.js)
module.exports = {
    entry: "./src/index.tsx",
    output: {
        filename: "bundle.js",
        path: __dirname + "/dist"
    },

    // Enable sourcemaps for debugging webpack's output.
    devtool: "source-map",

    resolve: {
        // Add '.ts' and '.tsx' as resolvable extensions.
        extensions: [".ts", ".tsx", ".js", ".json"]
    },

    module: {
        rules: [
            // All files with a '.ts' or '.tsx' extension will be handled by 'awesome-typescript-loader'.
            { test: /\.tsx?$/, loader: "awesome-typescript-loader" },

            // All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.
            { enforce: "pre", test: /\.js$/, loader: "source-map-loader" }
        ]
    },

    // When importing a module whose path matches one of the following, just
    // assume a corresponding global variable exists and use that instead.
    // This is important because it allows us to avoid bundling all of our
    // dependencies, which allows browsers to cache those libraries between builds.
    externals: {
        "react": "React",
        "react-dom": "ReactDOM"
    },
};

9. Add auto-refresh
npm install webpack-dev-server --save
in index.html, include bundle.js in source file
add scripts: { start: "webpack-dev-server" } in webpack.config.js

10. run
webpack-dev-server --inline

# Troubleshoot
1. Make sure the version of @types/react and version of @types/react-dom are compatible. To avoid typing relating issues, use the latest version of @types/react and @types/react-dom. ```npm install --save @types/react@latest @types/react-dom@latest. https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20863

2. 
output: {
    filename: "bundle.js",
    path: path.join(__dirname, 'dist'),
},
Don't use __dirname + 'dist'. there is probably some spaces in __dirname which causes it not working.

3. Webpack dev server detects index.html under base-content. You must have your index.html in that directory. Also, make sure react.js and react-dom.js in the directory.

4. HtmlWebpackPlugin will generate a index.html in /dist directory. the generated index.html does not have <div id="root"></div>. It only has a js bundle. So in index.tsx you can't select root div element as container. Use body as the container.

5. redux-observable has breaking changes in recent versions. Lower version of redux-observable(v0.18.0 does not work with react-redux(v5.0.7). Must use the latest redux-observable@1.0.0 and rxjs@6.3.1. Refer to document for redux-observable. rxjs operators must be imported in this way: ```import { filter, mergeMap, mapTo } from 'rxjs/operators';```